{"map":"{\"version\":3,\"sources\":[\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Components/Navbar/NavbarItems.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Components/Navbar/Navbar.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Components/Flashcard/Flashcard.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Components/CardList/CardList.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Components/Home/Home.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Pages/QuestionsPage/QuestionsPage.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/Components/Header/Header.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/App.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/reportWebVitals.js\",\"/Users/brianslaughter/Desktop/coding/javascript/react/flashcards/react-cards/src/index.js\"],\"names\":[\"Nav\",\"styled\",\"nav\",\"_templateObject\",\"_taggedTemplateLiteral\",\"NavLink\",\"Link\",\"_templateObject2\",\"NavMenu\",\"div\",\"_templateObject3\",\"_templateObject4\",\"_templateObject5\",\"Navbar\",\"React\",\"createElement\",\"className\",\"to\",\"Flashcard\",\"_ref\",\"flashcard\",\"flip\",\"setFlip\",\"useState\",\"concat\",\"onClick\",\"question\",\"answer\",\"CardList\",\"flashcards\",\"map\",\"card\",\"i\",\"key\",\"id\",\"length\",\"CARDS\",\"Home\",\"QuestionsPage\",\"props\",\"data\",\"JSON\",\"parse\",\"stringify\",\"flashcardData\",\"topic\",\"sources\",\"src\",\"Header\",\"Router\",\"Routes\",\"Route\",\"path\",\"element\",\"App\",\"reportWebVitals\",\"onPerfEntry\",\"Function\",\"__webpack_require__\",\"e\",\"then\",\"bind\",\"getCLS\",\"getFID\",\"getFCP\",\"getLCP\",\"getTTFB\",\"ReactDOM\",\"createRoot\",\"document\",\"getElementById\",\"render\",\"StrictMode\"],\"mappings\":\"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\",\"sourcesContent\":[\"import { NavLink as Link } from 'react-router-dom';\\nimport styled from 'styled-components';\\n\\nexport const Nav = styled.nav`\\n  background: #87ceeb;\\n  height: 85px;\\n  display: flex;\\n  justify-content: space-between;\\n  padding: 0.2rem;\\n  z-index: 12;\\n`;\\n\\nexport const NavLink = styled(Link)`\\n  color: black;\\n  display: flex;\\n  align-items: center;\\n  text-decoration: none;\\n  padding: 0 1rem;\\n  height: 100%;\\n  cursor: pointer;\\n  &.active {\\n    color: white;\\n  }\\n`;\\n\\nexport const NavMenu = styled.div`\\n  display: flex;\\n  align-items: center;\\n  margin-right: -24px;\\n\\n`;\\n\\nexport const NavBtn = styled.nav`\\n  display: flex;\\n  align-items: center;\\n  margin-right: 24px;\\n`;\\n\\nexport const NavBtnLink = styled(Link)`\\n  border-radius: 4px;\\n  #background: #808080;\\n  padding: 10px 22px; \\n  color: #000000;\\n  outline: none;\\n  border: none;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in-out;\\n  text-decoration: none;\\n\\n  margin-left: 24px;\\n  &:hover {\\n    transition: all 0.2s ease-in-out;\\n    background: #fff;\\n    color: #808080;\\n  }\\n`;\\n\\n\\n\\n\",\"import React from 'react';\\nimport { Nav, NavLink, NavMenu } from './NavbarItems';\\n \\nconst Navbar = () => {\\n  return (\\n    <div className=\\\"navbar\\\"> \\n      <Nav>\\n        <NavMenu> \\n          <NavLink to=\\\"/react-cards\\\">\\n            Home\\n          </NavLink>\\n          <NavLink to=\\\"/javascript\\\">\\n            JavaScript\\n          </NavLink>\\n          <NavLink to=\\\"/react\\\">\\n            React.js\\n          </NavLink>\\n          <NavLink to=\\\"/node\\\">\\n            Node.js\\n          </NavLink>\\n          <NavLink to=\\\"dsa\\\">\\n            DSA\\n          </NavLink>\\n        </NavMenu>\\n      </Nav>\\n    </div>\\n  );\\n};\\n\\nexport default Navbar;\",\"import React, { useState } from 'react';\\n\\nconst Flashcard = ({ flashcard }) => {\\n\\tconst [flip, setFlip] = useState(false);\\n\\n\\treturn (\\n\\t\\t<div className={`card ${flip ? 'flip' : ''}`} onClick={() => setFlip(!flip)}>\\n\\t\\t\\t<div className=\\\"front\\\">\\n\\t\\t\\t\\t{flashcard.question}\\n\\t\\t\\t</div>\\n\\t\\t\\t<div className=\\\"back\\\">\\n\\t\\t\\t\\t<hr />\\n\\t\\t\\t\\t{flashcard.answer}\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t);\\n};\\n\\nexport default Flashcard;\",\"import React from 'react';\\nimport Flashcard from '../Flashcard/Flashcard';\\n\\nconst CardList = ({ flashcards }) => {\\n\\treturn (\\n\\t\\t<div className=\\\"card-container\\\">\\n\\t\\t\\t{flashcards.map((card, i) => {\\n\\t\\t\\t\\treturn (\\n\\t\\t\\t\\t\\t<div key={i}>\\n\\t\\t\\t\\t\\t\\t<div className=\\\"card-header overlay-container\\\">#{card.id} of {flashcards.length}</div>\\n\\t\\t\\t\\t\\t\\t<Flashcard flashcard={card} key={card.id} />\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t)\\n\\t\\t\\t})}\\n\\t\\t</div>\\n\\t);\\n}\\n\\nexport default CardList;\",\"import React from 'react';\\nimport CardList from '../CardList/CardList';\\n\\nconst CARDS = [\\n  { \\n    id: 1,\\n    question: 'How does this app work? (Click and see!)',\\n    answer: 'You may flip over each of the presented flashcards to review certain questions.'\\n  },\\n  {\\n    id: 2,\\n    question: 'What content can I review?',\\n    answer: 'There is a variety of programming related trivia that can be accessed and read through. Generally up to the current point there has been an emphasis on JavaScript and front end oriented concepts.'\\n  },\\n  {\\n    id: 3,\\n    question: 'How do I select the content I want to review?',\\n    answer: 'The top navigation menu has links to different data sets containing questions in their respective topic. There are quiz flashcards on common technologies such as JavaScript and its popular libraries.'\\n  }\\n];\\n\\nconst Home = () => {\\n\\treturn (\\n\\t\\t<div>\\n\\t\\t\\t<div className=\\\"overlay-container\\\">\\n\\t\\t\\t\\t<h1>React Cards</h1>\\n\\t\\t\\t\\t<h2>Review Technical Trivia</h2>\\n\\t\\t\\t</div>\\n\\t\\t\\t<CardList flashcards={CARDS} />\\n\\t\\t</div>\\n\\t);\\n}\\n\\nexport default Home;\",\"import React from 'react';\\nimport CardList from '../../Components/CardList/CardList';\\nimport flashcardData from '../../CardData/cardData.json';\\n\\nconst QuestionsPage = (props) => {\\n  var data = JSON.parse(JSON.stringify(flashcardData[props.topic]));\\n  return (\\n    <div>\\n      <div className=\\\"overlay-container\\\">\\n        <h1>Flashcards Topic: { props.topic }</h1>\\n        <h2>Question Set Contains {data.flashcards.length} Flashcards</h2>\\n        <div className=\\\"sources\\\">\\n          <div>Source(s): </div>\\n          { props.sources && props.sources.map((src, i) => (\\n            <div key={i}>{src}</div>\\n          ))}\\n        </div>\\n      </div>\\n      <CardList flashcards={data.flashcards} />\\n    </div>\\n  );\\n}\\n\\nexport default QuestionsPage;\",\"import React from 'react';\\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\\nimport Navbar from '../../Components/Navbar/Navbar';\\nimport Home from '../../Components/Home/Home';\\n\\nimport QuestionsPage from '../../Pages/QuestionsPage/QuestionsPage';\\n\\n\\nconst Header = () => {\\n\\tconst javaScriptSources = ['https://interviewbit.com/javascript-interview-questions'];\\n\\tconst reactSources = ['https://www.interviewbit.com/react-interview-questions/', 'https://www.geeksforgeeks.org/reactjs-virtual-dom/'];\\n\\tconst nodeSources = ['https://www.interviewbit.com/node-js-interview-questions/', 'https://www.geeksforgeeks.org/node-interview-questions-and-answers/'];\\n\\tconst dsaSources = ['https://leetcode.com'];\\n\\n\\treturn (\\n\\t\\t<Router>\\n\\t\\t\\t<Navbar />\\n\\t\\t\\t<Routes>\\n\\t\\t\\t\\t<Route path=\\\"/\\\" element={<Home />} />\\n\\t\\t\\t\\t<Route path=\\\"/javascript\\\" element={<QuestionsPage topic=\\\"javascript\\\" sources={javaScriptSources} />} />\\n\\t\\t\\t\\t<Route path=\\\"/react\\\" element={<QuestionsPage topic=\\\"react\\\" sources={reactSources} />} />\\n\\t\\t\\t\\t<Route path=\\\"/node\\\" element={<QuestionsPage topic=\\\"node\\\" sources={nodeSources} />} />\\n\\t\\t\\t\\t<Route path=\\\"/dsa\\\" element={<QuestionsPage topic=\\\"dsa\\\" sources={dsaSources} />} />\\n\\t\\t\\t</Routes> \\n\\t\\t</Router>\\n\\t);\\n}\\n\\nexport default Header;\",\"import React from 'react';\\nimport Header from './Components/Header/Header';\\n\\nimport './App.css';\\n\\n\\nfunction App() {\\n\\n  return (\\n    <div className=\\\"app-container\\\">\\n      <Header />\\n    </div>\\n  );\\n}\\n\\nexport default App;\",\"const reportWebVitals = onPerfEntry => {\\n  if (onPerfEntry && onPerfEntry instanceof Function) {\\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\\n      getCLS(onPerfEntry);\\n      getFID(onPerfEntry);\\n      getFCP(onPerfEntry);\\n      getLCP(onPerfEntry);\\n      getTTFB(onPerfEntry);\\n    });\\n  }\\n};\\n\\nexport default reportWebVitals;\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom/client';\\nimport './index.css';\\nimport App from './App';\\nimport reportWebVitals from './reportWebVitals';\\n\\nconst root = ReactDOM.createRoot(document.getElementById('root'));\\nroot.render(\\n  <React.StrictMode>\\n    <App />\\n  </React.StrictMode>\\n);\\n\\n// If you want to start measuring performance in your app, pass a function\\n// to log results (for example: reportWebVitals(console.log))\\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\\nreportWebVitals();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{16:function(e){e.exports={javascript:{flashcards:[{id:1,question:\"What is event delegation?\",answer:\"Event delegation is a technique involving adding event listeners to a parent element instead of adding them to the descendant elements. The listener will fire whenever the event is triggered on the descendant elements due to event bubbling up the DOM. The benefits of this technique are a) memory efficiency because only a single handler is needed on the parent as opposed to each descendant and b) there's no need to unbind the handler from events that are formed and to bind the event for new elements\"},{id:2,question:\"How does the this keyword work?\",answer:\"In JavaScript, the this keyword refers to an object; which object depends on how this is being invoked. In an object method, this refers to the object. Used alone or in a function, this refers to the global object. Within a function in strict mode, this is undefined. In an event this refers to the element receiving the event. Methods like call(), apply(), and bind can refer this to any object.\"},{id:3,question:\"How has working with this changed in ES6?\",answer:\"ES6 allows you to use arrow functions which uses the enclosing lexical scope. While this is convenient, it prevents the caller from controlling context via .call or .apply. The consequence of this is that a library such as jQuery will not bind this properly in event handler functions. Take note of this when refactoring legacy code.\"},{id:4,question:\"How does prototypal inheritance work?\",answer:\"All JavaScript objects have a __proto__ property with the exception of objects created with Object.create(null). This property is a reference to another object referred to as the object's prototype. If a property isn't found in a given object the JavaScript engine will search through each level of __proto__ for the desired attribute. In this sense prototypal inheritance is more of a delegation than an inheritance relationship, but the behavior will simulate standard inheritance.\"},{id:5,question:\"What are the different data types in JavaScript?\",answer:\"Primatives (String, Number, BigInt, Boolean, Undefined, Null, Symbol), and Object\"},{id:6,question:\"Explain Hoisting in JavaScript\",answer:\"Hoisting is the default JavaScript behavior where all variable and function declarations are moved on top. Thus, wherever the variables and functions are declared they will be moved on top of the scope (which may be either local or global)\"},{id:7,question:\"Difference between == and ===\",answer:\"== compares values, whereas === compares both types and values\"},{id:8,question:\"Difference between var and let\",answer:\"var keyword has a function scope, whereas let's scope is restricted to the block in which it's declared. In ECMAScript 2015 let and const are hoisted but not initialized (can lead to ReferenceError if var is referenced before where it's declared)\"},{id:9,question:\"Explain implicit type coercion\",answer:\"In JavaScript this is the automatic conversion of value from one data type to another, where the operands of an expression are of different types. For example, a number added to a string is converted to string and the result is concatenated. The == operator converts operands to the same type to compare their values.\"},{id:10,question:\"Is JavaScript statically or dynamically typed?\",answer:\"JavaScript is dynamically typed. Variable types are checked during runtime, and a variable can hold the value of any data time.\"},{id:11,question:\"What is NaN in JS?\",answer:\"This property represents the value Not-a-Number and indicates a value that is not a legal number. It's datatype, ironically, is Number since it is the result of calculations. We can use isNaN() to check whether a value converts to Number or not.\"},{id:12,question:\"Explain pass by value vs pass by reference\",answer:\"While passing non-primative data types, the assign operator directly passes the reference address.\"},{id:13,question:\"What is an immediately invoked function in JavaScript?\",answer:\"An IIFE is a function that is invoked as soon as it's defined. Syntax example: (function(){...})();. One of the primary uses of IIFE is to create private scope/state through closures.\"},{id:14,question:\"What are higher order functions?\",answer:\"Higher order functions in JavaScript are functions that operate on other functions\"},{id:15,question:\"Explain call(), apply(), and bind()\",answer:\"call() is a predefined method in JavaScript that invokes a function by specifying the owner object. apply() is similar, but it accepts arguments as an array in a second parameter. bind() returns a new function where this is bound to the owner object that's provided as an argument.\"},{id:16,question:\"What's the difference between test() and exec()?\",answer:\"test() and exec() are both RegExp methods in JS. exec() is used to search for a string for a specific pattern and return the pattern if identified. The test() method, however, simply returns a boolean asserting the pattern's presence.\"},{id:17,question:\"What is currying?\",answer:\"Currying is a technique to transform a function of arguments n, to n functions of one or fewer arguments. Currying essentially transforms f(a,b) into f(a)(b) by nesting an inner function that gets returned\"},{id:18,question:\"What are some perks of using external JavaScript?\",answer:\"It makes the code more reusable and it helps separate the markup from logic, thereby allowing for smoother collaboration and readability\"},{id:19,question:\"Explain Scope and Scope Chain\",answer:\"The scope lets us know at any given part of code which variables/functions we can or can't access. JavaScript has three scopes: Global, Local/Function, and Block scope. The Scope Chain is how JavaScript engine applies Scoping rules to locate variables. If JS can't find the variable in its local scope, it proceeds to seek its outer scope and then the global scope from there. If a variable is never found a reference error is thrown.\"},{id:20,question:\"What are Closures?\",answer:\"Closures are an ability of a function to remember variables/functions declared in its outer scope. The ability of a function to store a value in memory for further reference is called Closure.\"},{id:21,question:\"List some advantages and perks of JavaScript\",answer:\"1) It can be executed on server-side as well as client-side. Node can be used on the backend and there are a variety of frontend frameworks. 2) Web pages have more functionality because of JS. 3) To the end-user JS is relatively quick \"},{id:22,question:\"Whate are object prototypes?\",answer:\"All JavaScript objects inherit properties from a prototype. At the top of the chain is Object.prototype. Every prototype inherits properties and methods from the Object.prototype. The prototype is a blueprint of an object allowing us to use properties an methods even if they don't exist on the current object. For example, if we call arr.push(1), this is possible because array objects inherit properties from the Array prototype. \"},{id:23,question:\"What are callbacks?\",answer:\"A callback is a function that will be executed after another function gets executed. In JavaScript, functions can be used as arguments of others functions, returned by other functions, and used as a property of an object. Functions that are used as arguments to other functions are called callback functions.\"},{id:24,question:\"What is memoization?\",answer:\"Memoization is a form of caching where the return value of a function is stored based on its parameters. It is typically used for expensive function calls since the benefit is storing the results of previous function calls.\"},{id:25,question:\"What is the DOM?\",answer:\"The Document Object Model is a programming interface for HTML and XML docs. When the browser renders an HTML document it creates a tree-structured object based on the HTML elements. Using this DOM we can manipulate and change various elements inside the HTML document.\"},{id:26,question:\"What is the BOM?\",answer:\"The Browser Object Model allows users to interact with the browser. A browser's initial object is a window. As a result, you may call all of the window's functions directly or by referencing the window. The window object contains many attributes, including the document, history, screen, navigator, location, and more.\"},{id:27,question:\"What are arrow functions?\",answer:\"Arrow functions were introduced in the ES6 version of JavaScript. They provide us with a concise syntax for declaring functions. The biggest difference arrow functions have is in the handling of the this keyword. Generally, this would be referring to the object calling the function. With arrow functions, however, this is not bound to anything and thus will return the window/global object.\"},{id:28,question:\"What is the rest parameter and spread operator (...)?\",answer:\"The rest parameter (...args) allows for a variable number of arguments that will be converted into an array using the rest parameter. The spread operator (...arr) is used spread out the elements in arrays and object literals.\"},{id:29,question:\"What is the use of promises?\",answer:\"Promises are used to handle asynchronous operations in JavaScript. A Promise object has four states: pending, fulfilled, rejected, settled. A Promise constructor takes in a callback function with two parameters, resolve and reject respectively.\"},{id:30,question:\"What are classes in JavaScript?\",answer:\"Introduced in ES6, classes are essentially syntactic sugars for constructor functions. They provide a new clear and legible way of declaring constructor functions in JS.\"},{id:31,question:\"What are generator functions?\",answer:\"Generator functions are a special class of function that can be stopped midway and then continue from where they had stopped. They are declared with the function* keyword and they return generator objects that handle the execution. The generator object consists of a next() method that executes code until the next yield statement. Generator functions are used to return iterators.\"},{id:32,question:\"Why do we use callbacks?\",answer:\"Since JavaScript is a scripting language that is based on events, it will continue to run while monitoring for additional events. Callbacks are a way of ensuring that a particular code doesn't run until another segment has executed.\"},{id:33,question:\"What is destructuring?\",answer:\"Destructuring is a way to extract elements from an object or an array. i.e. const {a,b,c} = obj; or const [first, second] = arr;\"},{id:34,question:\"What is a temporal dead zone?\",answer:\"Temporal Dead Zone is a behavior that occurs with variables declared using let or const. It's a behavior where we try to access a variable before it's initialized.\"},{id:35,question:\"What are 3 common JavaScript Design Patterns?\",answer:\"1) Creational Design Pattern focuses on object generation and ensuring that items are appropriate for certain scenarios. 2) The Structural Design Pattern explains how classes and objects can be combined to construct larger, extensible frameworks. This pattern makes it easier to create clearly-defined relationships between entities. 3) Behavioral Design Pattern highlights the patterns of communication between objects in the project.\"},{id:36,question:\"Is JavaScript pass-by-value or pass-by-reference?\",answer:\"A varible's data is always a reference for objects, hence it's always PBV. As a result, if you supply an object and change its members the method, the changes will persist outside of it. In this case it gives the appearance of being pass by reference, however if you were to modify the values of the object variable the change will not last thereby demonstrating JS is pass by value.\"},{id:37,question:\"What is the role of deferred scripts in JavaScript?\",answer:\"Deferred scripts allow HTML pages to finish parsing and render before the JavaScript will run, thereby allowing pages to appear more quickly and reducing initial load time. This could be useful if a script is particularly hefty or a network connection is slow.\"}]},react:{flashcards:[{id:1,question:\"What is React?\",answer:\"React is a front end, open-source JavaScript library used to develop user interfaces specifically for single page applications. It's helpful in building complex and reusable UI components on web applications.\"},{id:2,question:\"What are some important features of React?\",answer:\"React supports server-side rendering. React also makes use of a virtual DOM rather than the DOM itself because it is more efficient to edit small elements and interactions rather than the entire page. React follows unidirectional data flow. It allows for composability and reusability due to its component-oriented structure.\"},{id:3,question:\"What is the Virtual DOM?\",answer:\"React's Virtual DOM is an in-memory representation of the DOM tree synced with the 'real DOM' by a library such as ReactDOM in a process called reconciliation. The Virtual DOM serves as a lightweight copy of the DOM that is more efficient to edit since nothing is drawn onto the screen. Thus, when there is a change in state we first update the Virtual DOM by checking for differences between the current VDOM and a previous VDOM. This process means that only updated elements will need to be re-rendered.\"},{id:4,question:\"How does the Virtual DOM improve efficiency?\",answer:\"When anything new is added to the application a Virtual DOM tree is created. Each element is a node, and whenever there is a change in state a new VDOM tree is created. Each new VDOM is then compared with the previous VDOM to mark which nodes have been updated. Thus, only updated elements will need to be re-rendered on the real DOM.\"},{id:5,question:\"How does React manage the Virtual DOM?\",answer:\"React maintains two Virtual DOM at each time, one contains an updated VDOM and the other contains a pre-update version of this current VDOM. This allows React to compare the current VDOM to the VDOM prior to the change in state in a process known as 'diffing'.\"},{id:6,question:\"What are some advantages of using React?\",answer:\"The use of Virtual DOM improves memory. This diffing process React uses is significantly more efficient than rendering the UI inside the browser directly because the diffing process allows React to only re-render the portions that need updating. The web component structure of React also allows for composability and reusability, making it a practical tool for designing user interfaces.\"},{id:7,question:\"What is useState() in React?\",answer:\"useState() is a built-in React Hook that allows you to have state variables in functional components. It can be used when the DOM has something it's dynamically controlling/manipulating.\"},{id:8,question:\"What are keys in React?\",answer:\"A key is a special string attribute that needs to be included when using lists of elements. Keys help React identify which elements were inserted, deleted, or changed. Without keys React would not understand the order or uniqueness of each element.\"},{id:9,question:\"What are differences between functional and class components?\",answer:\"Before hooks, functional components were called stateless components and were behind class components on a feature basis. After hooks, functional components are equivalent. Functional components are simply JavaScript functions. Meanwhile, class components use ES6 class syntax. In functional components props are passed as a parameter whereas in Class components they're handled via the constructor and accessed via 'this'.\"},{id:10,question:\"How is state managed in functional and class components?\",answer:\"Functional components use React hooks to handle state. You can call the useState hook to set the state of a variable inside a component (i.e. let [count, setCount] = useState(0);). useState returns an array of two items containing the current state and its updater function. In class components we cannot use hooks. In class components you can create the state object in the constructor and bind the updater function to 'this' in order to use setState.\"},{id:11,question:\"What are props in React?\",answer:\"Props are the inputs to a React component. They can be single-valued or objects having a set of values that will be passed to components during creation. Essentially props are the data passed from a parent component into a child component. Props provide different component functionalities, such as passing custom data to a component or triggering state changes.\"},{id:12,question:\"Compare React state and props\",answer:\"Props are immutable, better performing, and can be passed to child components. State is owned by its component and locally scoped. State is writeable/mutable and has the setState() method to modify properties. Changes to state can be async, and state can only be passed as props.\"},{id:13,question:\"What is prop drilling?\",answer:\"Sometimes we need to pass data from a component high up in the DOM hierarchy to a nested component with much more specificity. Prop drilling is the term for continually passing the required data through props until it propagates to the intended component. A disadvantage to prop drilling is that components that should otherwise be unaware of the passed data now have access to it.\"},{id:14,question:\"What are React Hooks?\",answer:\"React Hooks are built-in functions that permit developers to use state and lifecycle methods within React components. Each component's lifecycle has 3 phases - mount, unmount, and update. Using Hooks, all features of React can be utilized with functional components. Hooks are functions that let us 'hook into' React state/lifecycle features from a functional component.\"},{id:15,question:\"What are two rules that must be followed when using React Hooks?\",answer:\"React Hooks must only be called at the top level. You cannot call them inside nested functions, loops, or conditionals. Also, you only call Hooks from React Function Components. Hooks use the call stack of the functional components to manage the component's state and lifecycle, so Class Components cannot utilize Hooks.\"},{id:16,question:\"What are some techniques you can use to optimize React app performance?\",answer:\"useMemo() is a React hook you can use for caching CPU-extensive functions. useMemo can help cache costly functions that get called on component re-renders. React.PureComponent is a base component that checks the state and props of a component to check if it needs updating. Using PureComponent is a way to reduce unnecessary re-renders of a component. State Colocation is also advantageous for maintaining clean code and avoiding unnecessary re-renders of a component. \"},{id:17,question:\"What are some ways to pass data between components?\",answer:\"You can pass data from parent components to child components using props. You can propagate data back from child to parent by emitting events and using callbacks to send data from the child component.\"},{id:18,question:\"What are Higher Order Components?\",answer:\"Higher Order Components are functions that take in a component and return a new component. These might be used to reduce code repetition and create an abstraction that can be used to create multiple components with subtle differences.\"},{id:19,question:\"What are different phases of a component's lifecycle?\",answer:\"Initialization entails setting up props and state. Then Mounting refers to putting elements into the browser DOM - lifecycle methods componentWillMount and componentDidMount are auxilary lifecycle methods in this phase. Then the Updating phase refers to components being updated upon changes in their state or props. Lastly, the final phase Unmounting entails unmounting from the browser DOM or removal from the DOM (lifecycle method componentWillUnmount used). \"},{id:20,question:\"What are some built-in Hooks in React?\",answer:\"The Basic Hooks entails useState, useEffect, useContext. Additional Hooks include useReducer, useMemo, useCallback, useImperativeHandle, useDebugValue, useRef, useLayoutEffect\"},{id:21,question:\"What do the basic built-in Hooks do? (useState(), useEffect(), useContext())\",answer:\"useState() is used to set and retrieve a component's state. useEffect() lets you sync a component with an external system. useEffect tells React that your component needs to do something after rendering. useContext() is used for creating common context data for a component hierarchy to access without having to pass down props to each level.\"}]},node:{flashcards:[{id:1,question:\"What is Node?\",answer:\"Node.js is used to run server-side code and JavaScript programs outside of the browser. It cannot be used to run HTML tags.\"},{id:2,question:\"Is Node single-threaded?\",answer:\"Yes, Node is a single threaded application built using the single-threaded event loop model architecture.\"},{id:3,question:\"What API functions are supported by Node?\",answer:\"Node can support both synchronous and asynchronous API functions, used for blocking and non-blocking code respectively.\"},{id:4,question:\"What's the difference between synchronous and asynchronous functions?\",answer:\"Synchronous functions block the execution of the program when an operation is performed. Asynchronous functions, however, are non-blocking and can work in the background while the program continues. Thus, asynchronous procedures can be useful for offloading heavy tasks in the background when feasible.\"},{id:5,question:\"What is a module in Node?\",answer:\"A module is a block of code that can perform functionality and communicate with external applications. Modules are useful due to their reusability and ability to minimize code complexity. Some examples of common modules are http, fs, os, path, etc.\"},{id:6,question:\"What is npm?\",answer:\"NPM is Node Package Manager. It is an online repository for Node packages and we can interface with npm via the command line to install various packages for application usage.\"},{id:7,question:\"What is middleware?\",answer:\"Middleware is the function that works between the request/response cycle. Middleware is executed after the server receives a request and before the controller sends a response.\"},{id:8,question:\"How does Node.js handle concurrency despite being single-threaded?\",answer:\"Node.js uses the libuv library internally for processing asynchronous calls. This library creates thread pools to handle async procedures.\"},{id:9,question:\"What is the event loop in Node?\",answer:\"The event loop is used to handle callbacks. It's helpful in performing non-blocking IO operations. The event loop is an endless loop waiting to receive tasks, execute them, and resume listening until it receives more events to process.\"},{id:10,question:\"What's the order in which control flow statements are executed?\",answer:\"Execution & queue handling --\\x3e collection and storage of data --\\x3e handling concurrency --\\x3e executing next lines of code.\"},{id:11,question:\"What is REPL?\",answer:\"REPL refers to the Read, Eval, Print Loop. It's a toplevel language shell used to take user inputs, execute them, and return their results to the user.\"},{id:12,question:\"What is package.json?\",answer:\"package.json is a file used to store the metadata of all contents of a given project. It's used to describe the modues used, run commands and scripts, and other useful information surrounding the project.\"},{id:13,question:\"What are promises?\",answer:\"Promises are essentially an advancement of callbacks. Promises are JavaScript objects that are used to handle asynchronous operations. Promises solve the issue of having many nested callback functions in an application's codebase.\"},{id:14,question:\"What is the crypto module?\",answer:\"The crypto module is used for hashing, encrypting, or decrypting any given data. This encryption process adds a layer of secuirty authentication to help keep plaintext secure.\"},{id:15,question:\"What are timers often used for in Node?\",answer:\"setTimeout, for example, allows us to execute a subroutine or block of code after a specified period of time.\"}]},dsa:{flashcards:[{id:1,question:\"What are some nlogn sorting algorithms?\",answer:\"Merge Sort and Heap Sort\"},{id:2,question:\"When would you use a binary search? What is its runtime?\",answer:\"You can use a binary search when you know that a collection is sorted because the search relies on partitioning a collection based on its ordered values. Its runtime is log(n) because the problem set halves with each iteration.\"},{id:3,question:\"How do stacks and queues work?\",answer:\"Stacks operate on a LIFO basis and Queues operate on a FIFO basis. Thus, you may be inclined to use a stack in scenarios involving backtracking and queues in scenarios requiring prioritization.\"},{id:4,question:\"What is a stable sorting algorithm?\",answer:\"Stable sorting algorithms are able to maintain the relative order of records with equal values. For example, Merge Sort is a highly performant stable algorithm with a runtime of O(nlogn)\"},{id:5,question:\"How might you go about detecting a cycle in a linked list?\",answer:\"The tortoise hare algorithm, which involes keeping track of a slow and fast pointer. If you skip over every other element with the fast pointer and progress normally with the slow one and they end up reaching the same node, this would demonstrate the existence of a cycle.\"}]}}},17:function(e,t,a){e.exports=a(29)},24:function(e,t,a){},28:function(e,t,a){},29:function(e,t,a){\"use strict\";a.r(t);var n,o,s,i,r,c=a(0),l=a.n(c),d=a(12),h=a.n(d),u=(a(24),a(5)),p=a(1),m=a(3),f=a(4);const w=f.a.nav(n||(n=Object(m.a)([\"\\n  background: #87ceeb;\\n  height: 85px;\\n  display: flex;\\n  justify-content: space-between;\\n  padding: 0.2rem;\\n  z-index: 12;\\n\"]))),b=Object(f.a)(u.b)(o||(o=Object(m.a)([\"\\n  color: black;\\n  display: flex;\\n  align-items: center;\\n  text-decoration: none;\\n  padding: 0 1rem;\\n  height: 100%;\\n  cursor: pointer;\\n  &.active {\\n    color: white;\\n  }\\n\"]))),g=f.a.div(s||(s=Object(m.a)([\"\\n  display: flex;\\n  align-items: center;\\n  margin-right: -24px;\\n\\n\"])));f.a.nav(i||(i=Object(m.a)([\"\\n  display: flex;\\n  align-items: center;\\n  margin-right: 24px;\\n\"]))),Object(f.a)(u.b)(r||(r=Object(m.a)([\"\\n  border-radius: 4px;\\n  #background: #808080;\\n  padding: 10px 22px; \\n  color: #000000;\\n  outline: none;\\n  border: none;\\n  cursor: pointer;\\n  transition: all 0.2s ease-in-out;\\n  text-decoration: none;\\n\\n  margin-left: 24px;\\n  &:hover {\\n    transition: all 0.2s ease-in-out;\\n    background: #fff;\\n    color: #808080;\\n  }\\n\"])));var y=()=>l.a.createElement(\"div\",{className:\"navbar\"},l.a.createElement(w,null,l.a.createElement(g,null,l.a.createElement(b,{to:\"/react-cards\"},\"Home\"),l.a.createElement(b,{to:\"/javascript\"},\"JavaScript\"),l.a.createElement(b,{to:\"/react\"},\"React.js\"),l.a.createElement(b,{to:\"/node\"},\"Node.js\"),l.a.createElement(b,{to:\"dsa\"},\"DSA\"))));var v=e=>{let{flashcard:t}=e;const[a,n]=Object(c.useState)(!1);return l.a.createElement(\"div\",{className:\"card \".concat(a?\"flip\":\"\"),onClick:()=>n(!a)},l.a.createElement(\"div\",{className:\"front\"},t.question),l.a.createElement(\"div\",{className:\"back\"},l.a.createElement(\"hr\",null),t.answer))};var k=e=>{let{flashcards:t}=e;return l.a.createElement(\"div\",{className:\"card-container\"},t.map((e,a)=>l.a.createElement(\"div\",{key:a},l.a.createElement(\"div\",{className:\"card-header overlay-container\"},\"#\",e.id,\" of \",t.length),l.a.createElement(v,{flashcard:e,key:e.id}))))};const q=[{id:1,question:\"How does this app work? (Click and see!)\",answer:\"You may flip over each of the presented flashcards to review certain questions.\"},{id:2,question:\"What content can I review?\",answer:\"There is a variety of programming related trivia that can be accessed and read through. Generally up to the current point there has been an emphasis on JavaScript and front end oriented concepts.\"},{id:3,question:\"How do I select the content I want to review?\",answer:\"The top navigation menu has links to different data sets containing questions in their respective topic. There are quiz flashcards on common technologies such as JavaScript and its popular libraries.\"}];var S=()=>l.a.createElement(\"div\",null,l.a.createElement(\"div\",{className:\"overlay-container\"},l.a.createElement(\"h1\",null,\"React Cards\"),l.a.createElement(\"h2\",null,\"Review Technical Trivia\")),l.a.createElement(k,{flashcards:q})),E=a(16);var x=e=>{var t=JSON.parse(JSON.stringify(E[e.topic]));return l.a.createElement(\"div\",null,l.a.createElement(\"div\",{className:\"overlay-container\"},l.a.createElement(\"h1\",null,\"Flashcards Topic: \",e.topic),l.a.createElement(\"h2\",null,\"Question Set Contains \",t.flashcards.length,\" Flashcards\"),l.a.createElement(\"div\",{className:\"sources\"},l.a.createElement(\"div\",null,\"Source(s): \"),e.sources&&e.sources.map((e,t)=>l.a.createElement(\"div\",{key:t},e)))),l.a.createElement(k,{flashcards:t.flashcards}))};var j=()=>{return l.a.createElement(u.a,null,l.a.createElement(y,null),l.a.createElement(p.c,null,l.a.createElement(p.a,{path:\"/\",element:l.a.createElement(S,null)}),l.a.createElement(p.a,{path:\"/javascript\",element:l.a.createElement(x,{topic:\"javascript\",sources:[\"https://interviewbit.com/javascript-interview-questions\"]})}),l.a.createElement(p.a,{path:\"/react\",element:l.a.createElement(x,{topic:\"react\",sources:[\"https://www.interviewbit.com/react-interview-questions/\",\"https://www.geeksforgeeks.org/reactjs-virtual-dom/\"]})}),l.a.createElement(p.a,{path:\"/node\",element:l.a.createElement(x,{topic:\"node\",sources:[\"https://www.interviewbit.com/node-js-interview-questions/\",\"https://www.geeksforgeeks.org/node-interview-questions-and-answers/\"]})}),l.a.createElement(p.a,{path:\"/dsa\",element:l.a.createElement(x,{topic:\"dsa\",sources:[\"https://leetcode.com\"]})})))};a(28);var W=function(){return l.a.createElement(\"div\",{className:\"app-container\"},l.a.createElement(j,null))};var T=e=>{e&&e instanceof Function&&a.e(3).then(a.bind(null,30)).then(t=>{let{getCLS:a,getFID:n,getFCP:o,getLCP:s,getTTFB:i}=t;a(e),n(e),o(e),s(e),i(e)})};h.a.createRoot(document.getElementById(\"root\")).render(l.a.createElement(l.a.StrictMode,null,l.a.createElement(W,null))),T()}},[[17,1,2]]]);","extractedComments":[]}